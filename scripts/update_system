#!/bin/bash
# vim:foldmethod=marker

## Variables {{{

dependencies=(git ranger timeshift gio)

max_backups=5
backup_message="After Update Backup"

# Colors
red="\e[0;91m"
blue="\e[0;94m"
expand_bg="\e[K"
blue_bg="\e[0;104m${expand_bg}"
red_bg="\e[0;101m${expand_bg}"
green_bg="\e[0;102m${expand_bg}"
green="\e[0;92m"
white="\e[0;97m"
bold="\e[1m"
uline="\e[4m"
reset="\e[0m"

function usage ()
{
    echo "Usage :  $0 [options] [--]

    Options:
    -h|help       Display this message
    -G|no-git     Don't update git repos
    -B|no-backup  Don't create a backup"

}    # ----------  end of function usage  ----------

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

do_git=true
do_backup=true

while getopts ":hBG" opt
do
    case ${opt} in

        h|help     )  usage; exit 0   ;;

        G|no-git   ) do_git=false ;;

        B|no-backup ) do_backup=false ;;

        * )  echo -e "\n  Option does not exist : OPTARG\n"
            usage; exit 1   ;;

        esac    # --- end of case ---
    done

## Variables }}}

## 0.- Initialization {{{

for dep in "${dependencies[@]}"; do
    if ! command -v "$dep" &> /dev/null; then
        echo -e "$red${dep}$reset not fount!"
        exit 1
    fi
done

## 0.- Initialization }}}

## 1.- Delete Unused Packages {{{

# Unused packages
# TODO

# Delete orphans packages
echo -e "checking orphan packages"
# pacman -Qtdq | pacman -Rns -
paru -cc

## 1.- Delete Unused Packages }}}

## 2.- Update System {{{

# Update system packages
echo -e "Updating System"
paru

# Update Python packages
pip freeze --user | cut -d'=' -f1 | xargs -n1 pip install -U

# Update nvim packages
echo -e "Updating vim plugins"
nvim -es -u ~/.config/nvim/init.vim -i NONE -c "PlugUpdate"

# update vim-plug
echo -e "Updating vim-plug"
nvim -es -u ~/.config/nvim/init.vim -i NONE -c "PlugUpgrade"

## 2.- Update System  }}}

## 3.- Clean system {{{

# Clean pacman and paru cache
paru -Sc --noconfirm && paccache -rk2

## 3.- Clean system }}}

## 4.- Clean Custom Folders {{{

# ~/Downloads

# (xdg-user-dir DOWNLOAD)
# (
#   "Music"
#   "Video"
#   "Pasar al Server"
#   "U"
# )

# ~/.config
# lista=$(git ls-tree --full-tree --name-only --full-name HEAD | tr "\n" ",")

## 4.- Clean Custom Folders }}}

## 5.- Clean Trash {{{

## 5.- Clean Trash }}}

## 6.- Update Dotfiles {{{

if $do_git; then
    git_untracked=($(echo "$(git status --porcelain)" | awk '$1 == "??" {print $2}'))

    cd "$HOME/dotfiles"
    git commit -a -m "update $(date +'%m-%d-%Y')"
    git push origin master
fi

## 6.- Update Dotfiles }}}

## 7.- Sort Wallpapers {{{

sort_wallpapers.py


## 7.- Sort Wallpapers }}}

## 8.- Change Wallpapers {{{

set_wallpapers.sh

## 8.- Change Wallpapers }}}

## 9.- Create Restore Point {{{

if $do_backup; then

    sudo timeshift --create --comment "$backup_message"
fi

## 9.- Create Restore Point }}}

## 10.- Delete Olds Restore Points {{{

# Get Snapshots
snapshots_lines=$(sudo timeshift --list | sed -n '/^-.*-$/, $ p' | sed -n '2,$ p')
snapshots=()

for line in "$snapshots_lines"; do
    snapshots+=($(echo "$line" | awk '{print $3}'))
done

(( ${#snapshots[@]} > $max_backups )) && sudo timeshift --delete --snapshot "${snapshots[0]}"


## 10.- Delete Olds Restore Points }}}

## 11.- Resume Output {{{

(( "${#git_untracked[@]}" > 0 )) && echo -e "There were $red${#git_untracked[@]}$reset files, please check it out."

## 11.- Resume Output }}}

